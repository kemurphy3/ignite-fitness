#!/usr/bin/env node

/**
 * Test for compound scaling vulnerability in ExpertCoordinator
 * Demonstrates how multiple scaling factors can create ineffective workouts
 */

console.log('🧮 COMPOUND SCALING VULNERABILITY TEST\n');

// Simulate the cascading scaling effects from ExpertCoordinator.js
function simulateCompoundScaling(baseWorkout, context) {
    let workout = JSON.parse(JSON.stringify(baseWorkout)); // Deep clone
    let appliedModifiers = [];
    
    console.log(`📋 Original workout:`, workout);
    
    // 1. Low readiness scaling (line 547-551 in ExpertCoordinator.js)
    if (context.readiness <= 4) {
        workout.sets = Math.max(2, Math.floor(workout.sets * 0.7));
        workout.load = workout.load ? workout.load * 0.7 : workout.load;
        appliedModifiers.push('Low readiness: sets *= 0.7, load *= 0.7');
        console.log(`   After readiness scaling: sets=${workout.sets}, load=${workout.load}`);
    }
    
    // 2. Volume scaling (line 564-567 in ExpertCoordinator.js)
    if (context.volumeScale && context.volumeScale < 1.0) {
        workout.sets = Math.max(1, Math.floor(workout.sets * context.volumeScale));
        appliedModifiers.push(`Volume scaling: sets *= ${context.volumeScale}`);
        console.log(`   After volume scaling: sets=${workout.sets}`);
    }
    
    // 3. Intensity scaling (applied in structurePlan)
    if (context.intensityScale && context.intensityScale < 1.0) {
        workout.load = workout.load ? workout.load * context.intensityScale : workout.load;
        appliedModifiers.push(`Intensity scaling: load *= ${context.intensityScale}`);
        console.log(`   After intensity scaling: load=${workout.load}`);
    }
    
    return { workout, appliedModifiers };
}

// Test Case 1: Extreme compound scaling
console.log('❌ TEST CASE 1: Extreme Compound Scaling');
const extremeContext = {
    readiness: 3,           // Triggers 0.7 multiplier
    volumeScale: 0.4,       // High training load
    intensityScale: 0.6     // Data confidence scaling
};

const baseWorkout = {
    exercise: 'Squat',
    sets: 4,
    reps: '8-12',
    load: 100
};

const extremeResult = simulateCompoundScaling(baseWorkout, extremeContext);
console.log(`🚨 Final result:`, extremeResult.workout);
console.log(`📉 Applied modifiers:`);
extremeResult.appliedModifiers.forEach(mod => console.log(`   • ${mod}`));

const volumeReduction = ((baseWorkout.sets - extremeResult.workout.sets) / baseWorkout.sets * 100).toFixed(1);
const loadReduction = ((baseWorkout.load - extremeResult.workout.load) / baseWorkout.load * 100).toFixed(1);
console.log(`📊 Net effect: ${volumeReduction}% volume reduction, ${loadReduction}% load reduction\n`);

// Test Case 2: Boundary conditions
console.log('❌ TEST CASE 2: Boundary Conditions');
const boundaryTests = [
    { name: 'Single set floor', context: { readiness: 1, volumeScale: 0.1 }, expectedSets: 1 },
    { name: 'Zero load risk', context: { readiness: 1, intensityScale: 0.1 }, expectedLoad: 10 },
    { name: 'All factors minimal', context: { readiness: 1, volumeScale: 0.2, intensityScale: 0.5 }, expectedSets: 1 }
];

boundaryTests.forEach(test => {
    const result = simulateCompoundScaling(baseWorkout, test.context);
    console.log(`   ${test.name}: sets=${result.workout.sets}, load=${result.workout.load}`);
    
    if (result.workout.sets <= 1) {
        console.log(`   🚨 WARNING: Workout reduced to minimal effectiveness`);
    }
});

console.log('\n❌ TEST CASE 3: Recovery Day + Simple Mode Collision');
// Simulate the collision described in edge case 8
const recoveryDayPlan = {
    mainSets: [{ exercise: 'Light Mobility Work', sets: 1, reps: '10-15' }],
    accessories: [],
    finishers: [{ exercise: 'Gentle Stretching', sets: 1, reps: '5-10' }]
};

console.log('Recovery day plan:', recoveryDayPlan);

// Simple mode processing (line 610-617)
const simpleModeResult = {
    ...recoveryDayPlan,
    accessories: [], // Removed in simple mode
    finishers: recoveryDayPlan.finishers.slice(0, 1) // Limited to 1
};

console.log('After simple mode filtering:', simpleModeResult);
console.log('🚨 Result: User gets mobility-only workout with no explanation of why');

console.log('\n📊 VULNERABILITY IMPACT ANALYSIS:');
console.log('🔴 CRITICAL: Compound scaling can reduce 4-set workout to 1-set');
console.log('🔴 CRITICAL: Load reductions compound to 70%+ decreases');
console.log('🟡 MODERATE: Recovery + simple mode creates unexpectedly minimal workouts');
console.log('🟡 MODERATE: No minimum effective dose protection');

console.log('\n🛠️  SPECIFIC FIXES NEEDED:');
console.log('1. Add minimum effective dose guards:');
console.log('   Math.max(2, Math.floor(sets * modifier)) // Ensure >= 2 sets');
console.log('2. Cap total reduction:');
console.log('   const totalReduction = readinessScale * volumeScale * intensityScale;');
console.log('   const cappedReduction = Math.max(0.5, totalReduction); // Max 50% reduction');
console.log('3. Add user notification for compound reductions:');
console.log('   if (totalReduction < 0.6) warn("Workout significantly reduced due to multiple factors")');

console.log('\n✅ CONCLUSION: System needs protective guards against compound scaling effects');